// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "main.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TransportMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransportMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransportMessage_TransportMessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_main_2eproto() {
  protobuf_AddDesc_main_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "main.proto");
  GOOGLE_CHECK(file != NULL);
  TransportMessage_descriptor_ = file->message_type(0);
  static const int TransportMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportMessage, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportMessage, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportMessage, control_),
  };
  TransportMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransportMessage_descriptor_,
      TransportMessage::default_instance_,
      TransportMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransportMessage));
  TransportMessage_TransportMessageType_descriptor_ = TransportMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_main_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportMessage_descriptor_, &TransportMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_main_2eproto() {
  delete TransportMessage::default_instance_;
  delete TransportMessage_reflection_;
}

void protobuf_AddDesc_main_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_column_2eproto();
  ::protobuf_AddDesc_control_2eproto();
  ::protobuf_AddDesc_query_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmain.proto\032\014column.proto\032\rcontrol.prot"
    "o\032\013query.proto\"\327\001\n\020TransportMessage\0224\n\004t"
    "ype\030\001 \002(\0162&.TransportMessage.TransportMe"
    "ssageType\022\032\n\004data\030\002 \001(\0132\014.DataMessage\022\025\n"
    "\005query\030\004 \001(\0132\006.Query\022 \n\007control\030\005 \001(\0132\017."
    "ControlMessage\"8\n\024TransportMessageType\022\010"
    "\n\004DATA\020\000\022\t\n\005QUERY\020\001\022\013\n\007CONTROL\020\002B6\n$edu."
    "washington.escience.myriad.protoB\016Transp"
    "ortProto", 328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "main.proto", &protobuf_RegisterTypes);
  TransportMessage::default_instance_ = new TransportMessage();
  TransportMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_main_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_main_2eproto {
  StaticDescriptorInitializer_main_2eproto() {
    protobuf_AddDesc_main_2eproto();
  }
} static_descriptor_initializer_main_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* TransportMessage_TransportMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportMessage_TransportMessageType_descriptor_;
}
bool TransportMessage_TransportMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransportMessage_TransportMessageType TransportMessage::DATA;
const TransportMessage_TransportMessageType TransportMessage::QUERY;
const TransportMessage_TransportMessageType TransportMessage::CONTROL;
const TransportMessage_TransportMessageType TransportMessage::TransportMessageType_MIN;
const TransportMessage_TransportMessageType TransportMessage::TransportMessageType_MAX;
const int TransportMessage::TransportMessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TransportMessage::kTypeFieldNumber;
const int TransportMessage::kDataFieldNumber;
const int TransportMessage::kQueryFieldNumber;
const int TransportMessage::kControlFieldNumber;
#endif  // !_MSC_VER

TransportMessage::TransportMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransportMessage::InitAsDefaultInstance() {
  data_ = const_cast< ::DataMessage*>(&::DataMessage::default_instance());
  query_ = const_cast< ::Query*>(&::Query::default_instance());
  control_ = const_cast< ::ControlMessage*>(&::ControlMessage::default_instance());
}

TransportMessage::TransportMessage(const TransportMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  data_ = NULL;
  query_ = NULL;
  control_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportMessage::~TransportMessage() {
  SharedDtor();
}

void TransportMessage::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete query_;
    delete control_;
  }
}

void TransportMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportMessage_descriptor_;
}

const TransportMessage& TransportMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_main_2eproto();  return *default_instance_;
}

TransportMessage* TransportMessage::default_instance_ = NULL;

TransportMessage* TransportMessage::New() const {
  return new TransportMessage;
}

void TransportMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::DataMessage::Clear();
    }
    if (has_query()) {
      if (query_ != NULL) query_->::Query::Clear();
    }
    if (has_control()) {
      if (control_ != NULL) control_->::ControlMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TransportMessage.TransportMessageType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TransportMessage_TransportMessageType_IsValid(value)) {
            set_type(static_cast< ::TransportMessage_TransportMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // optional .DataMessage data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_query;
        break;
      }
      
      // optional .Query query = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_control;
        break;
      }
      
      // optional .ControlMessage control = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TransportMessage.TransportMessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .DataMessage data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }
  
  // optional .Query query = 4;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->query(), output);
  }
  
  // optional .ControlMessage control = 5;
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->control(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransportMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TransportMessage.TransportMessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .DataMessage data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }
  
  // optional .Query query = 4;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->query(), target);
  }
  
  // optional .ControlMessage control = 5;
  if (has_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->control(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TransportMessage.TransportMessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .DataMessage data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
    // optional .Query query = 4;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }
    
    // optional .ControlMessage control = 5;
    if (has_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransportMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportMessage::MergeFrom(const TransportMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::DataMessage::MergeFrom(from.data());
    }
    if (from.has_query()) {
      mutable_query()->::Query::MergeFrom(from.query());
    }
    if (from.has_control()) {
      mutable_control()->::ControlMessage::MergeFrom(from.control());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportMessage::CopyFrom(const TransportMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  if (has_control()) {
    if (!this->control().IsInitialized()) return false;
  }
  return true;
}

void TransportMessage::Swap(TransportMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(query_, other->query_);
    std::swap(control_, other->control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransportMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransportMessage_descriptor_;
  metadata.reflection = TransportMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
