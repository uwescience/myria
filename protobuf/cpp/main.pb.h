// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto

#ifndef PROTOBUF_main_2eproto__INCLUDED
#define PROTOBUF_main_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "column.pb.h"
#include "control.pb.h"
#include "query.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_main_2eproto();
void protobuf_AssignDesc_main_2eproto();
void protobuf_ShutdownFile_main_2eproto();

class TransportMessage;

enum TransportMessage_TransportMessageType {
  TransportMessage_TransportMessageType_DATA = 0,
  TransportMessage_TransportMessageType_QUERY = 1,
  TransportMessage_TransportMessageType_CONTROL = 2
};
bool TransportMessage_TransportMessageType_IsValid(int value);
const TransportMessage_TransportMessageType TransportMessage_TransportMessageType_TransportMessageType_MIN = TransportMessage_TransportMessageType_DATA;
const TransportMessage_TransportMessageType TransportMessage_TransportMessageType_TransportMessageType_MAX = TransportMessage_TransportMessageType_CONTROL;
const int TransportMessage_TransportMessageType_TransportMessageType_ARRAYSIZE = TransportMessage_TransportMessageType_TransportMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransportMessage_TransportMessageType_descriptor();
inline const ::std::string& TransportMessage_TransportMessageType_Name(TransportMessage_TransportMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransportMessage_TransportMessageType_descriptor(), value);
}
inline bool TransportMessage_TransportMessageType_Parse(
    const ::std::string& name, TransportMessage_TransportMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransportMessage_TransportMessageType>(
    TransportMessage_TransportMessageType_descriptor(), name, value);
}
// ===================================================================

class TransportMessage : public ::google::protobuf::Message {
 public:
  TransportMessage();
  virtual ~TransportMessage();
  
  TransportMessage(const TransportMessage& from);
  
  inline TransportMessage& operator=(const TransportMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransportMessage& default_instance();
  
  void Swap(TransportMessage* other);
  
  // implements Message ----------------------------------------------
  
  TransportMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransportMessage& from);
  void MergeFrom(const TransportMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TransportMessage_TransportMessageType TransportMessageType;
  static const TransportMessageType DATA = TransportMessage_TransportMessageType_DATA;
  static const TransportMessageType QUERY = TransportMessage_TransportMessageType_QUERY;
  static const TransportMessageType CONTROL = TransportMessage_TransportMessageType_CONTROL;
  static inline bool TransportMessageType_IsValid(int value) {
    return TransportMessage_TransportMessageType_IsValid(value);
  }
  static const TransportMessageType TransportMessageType_MIN =
    TransportMessage_TransportMessageType_TransportMessageType_MIN;
  static const TransportMessageType TransportMessageType_MAX =
    TransportMessage_TransportMessageType_TransportMessageType_MAX;
  static const int TransportMessageType_ARRAYSIZE =
    TransportMessage_TransportMessageType_TransportMessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TransportMessageType_descriptor() {
    return TransportMessage_TransportMessageType_descriptor();
  }
  static inline const ::std::string& TransportMessageType_Name(TransportMessageType value) {
    return TransportMessage_TransportMessageType_Name(value);
  }
  static inline bool TransportMessageType_Parse(const ::std::string& name,
      TransportMessageType* value) {
    return TransportMessage_TransportMessageType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .TransportMessage.TransportMessageType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::TransportMessage_TransportMessageType type() const;
  inline void set_type(::TransportMessage_TransportMessageType value);
  
  // optional .DataMessage data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::DataMessage& data() const;
  inline ::DataMessage* mutable_data();
  inline ::DataMessage* release_data();
  
  // optional .Query query = 4;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 4;
  inline const ::Query& query() const;
  inline ::Query* mutable_query();
  inline ::Query* release_query();
  
  // optional .ControlMessage control = 5;
  inline bool has_control() const;
  inline void clear_control();
  static const int kControlFieldNumber = 5;
  inline const ::ControlMessage& control() const;
  inline ::ControlMessage* mutable_control();
  inline ::ControlMessage* release_control();
  
  // @@protoc_insertion_point(class_scope:TransportMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_control();
  inline void clear_has_control();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::DataMessage* data_;
  ::Query* query_;
  ::ControlMessage* control_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_main_2eproto();
  friend void protobuf_AssignDesc_main_2eproto();
  friend void protobuf_ShutdownFile_main_2eproto();
  
  void InitAsDefaultInstance();
  static TransportMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// TransportMessage

// required .TransportMessage.TransportMessageType type = 1;
inline bool TransportMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransportMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransportMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransportMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::TransportMessage_TransportMessageType TransportMessage::type() const {
  return static_cast< ::TransportMessage_TransportMessageType >(type_);
}
inline void TransportMessage::set_type(::TransportMessage_TransportMessageType value) {
  GOOGLE_DCHECK(::TransportMessage_TransportMessageType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .DataMessage data = 2;
inline bool TransportMessage::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransportMessage::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransportMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransportMessage::clear_data() {
  if (data_ != NULL) data_->::DataMessage::Clear();
  clear_has_data();
}
inline const ::DataMessage& TransportMessage::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::DataMessage* TransportMessage::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::DataMessage;
  return data_;
}
inline ::DataMessage* TransportMessage::release_data() {
  clear_has_data();
  ::DataMessage* temp = data_;
  data_ = NULL;
  return temp;
}

// optional .Query query = 4;
inline bool TransportMessage::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransportMessage::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransportMessage::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransportMessage::clear_query() {
  if (query_ != NULL) query_->::Query::Clear();
  clear_has_query();
}
inline const ::Query& TransportMessage::query() const {
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::Query* TransportMessage::mutable_query() {
  set_has_query();
  if (query_ == NULL) query_ = new ::Query;
  return query_;
}
inline ::Query* TransportMessage::release_query() {
  clear_has_query();
  ::Query* temp = query_;
  query_ = NULL;
  return temp;
}

// optional .ControlMessage control = 5;
inline bool TransportMessage::has_control() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransportMessage::set_has_control() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransportMessage::clear_has_control() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransportMessage::clear_control() {
  if (control_ != NULL) control_->::ControlMessage::Clear();
  clear_has_control();
}
inline const ::ControlMessage& TransportMessage::control() const {
  return control_ != NULL ? *control_ : *default_instance_->control_;
}
inline ::ControlMessage* TransportMessage::mutable_control() {
  set_has_control();
  if (control_ == NULL) control_ = new ::ControlMessage;
  return control_;
}
inline ::ControlMessage* TransportMessage::release_control() {
  clear_has_control();
  ::ControlMessage* temp = control_;
  control_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TransportMessage_TransportMessageType>() {
  return ::TransportMessage_TransportMessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_main_2eproto__INCLUDED
