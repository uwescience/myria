// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#ifndef PROTOBUF_control_2eproto__INCLUDED
#define PROTOBUF_control_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_control_2eproto();
void protobuf_AssignDesc_control_2eproto();
void protobuf_ShutdownFile_control_2eproto();

class ControlMessage;

enum ControlMessage_ControlMessageType {
  ControlMessage_ControlMessageType_CONNECT = 0,
  ControlMessage_ControlMessageType_START_QUERY = 1,
  ControlMessage_ControlMessageType_QUERY_READY_TO_EXECUTE = 2,
  ControlMessage_ControlMessageType_SHUTDOWN = 3
};
bool ControlMessage_ControlMessageType_IsValid(int value);
const ControlMessage_ControlMessageType ControlMessage_ControlMessageType_ControlMessageType_MIN = ControlMessage_ControlMessageType_CONNECT;
const ControlMessage_ControlMessageType ControlMessage_ControlMessageType_ControlMessageType_MAX = ControlMessage_ControlMessageType_SHUTDOWN;
const int ControlMessage_ControlMessageType_ControlMessageType_ARRAYSIZE = ControlMessage_ControlMessageType_ControlMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlMessage_ControlMessageType_descriptor();
inline const ::std::string& ControlMessage_ControlMessageType_Name(ControlMessage_ControlMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlMessage_ControlMessageType_descriptor(), value);
}
inline bool ControlMessage_ControlMessageType_Parse(
    const ::std::string& name, ControlMessage_ControlMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlMessage_ControlMessageType>(
    ControlMessage_ControlMessageType_descriptor(), name, value);
}
// ===================================================================

class ControlMessage : public ::google::protobuf::Message {
 public:
  ControlMessage();
  virtual ~ControlMessage();
  
  ControlMessage(const ControlMessage& from);
  
  inline ControlMessage& operator=(const ControlMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlMessage& default_instance();
  
  void Swap(ControlMessage* other);
  
  // implements Message ----------------------------------------------
  
  ControlMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControlMessage& from);
  void MergeFrom(const ControlMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ControlMessage_ControlMessageType ControlMessageType;
  static const ControlMessageType CONNECT = ControlMessage_ControlMessageType_CONNECT;
  static const ControlMessageType START_QUERY = ControlMessage_ControlMessageType_START_QUERY;
  static const ControlMessageType QUERY_READY_TO_EXECUTE = ControlMessage_ControlMessageType_QUERY_READY_TO_EXECUTE;
  static const ControlMessageType SHUTDOWN = ControlMessage_ControlMessageType_SHUTDOWN;
  static inline bool ControlMessageType_IsValid(int value) {
    return ControlMessage_ControlMessageType_IsValid(value);
  }
  static const ControlMessageType ControlMessageType_MIN =
    ControlMessage_ControlMessageType_ControlMessageType_MIN;
  static const ControlMessageType ControlMessageType_MAX =
    ControlMessage_ControlMessageType_ControlMessageType_MAX;
  static const int ControlMessageType_ARRAYSIZE =
    ControlMessage_ControlMessageType_ControlMessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ControlMessageType_descriptor() {
    return ControlMessage_ControlMessageType_descriptor();
  }
  static inline const ::std::string& ControlMessageType_Name(ControlMessageType value) {
    return ControlMessage_ControlMessageType_Name(value);
  }
  static inline bool ControlMessageType_Parse(const ::std::string& name,
      ControlMessageType* value) {
    return ControlMessage_ControlMessageType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .ControlMessage.ControlMessageType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ControlMessage_ControlMessageType type() const;
  inline void set_type(::ControlMessage_ControlMessageType value);
  
  // optional int32 remoteID = 2;
  inline bool has_remoteid() const;
  inline void clear_remoteid();
  static const int kRemoteIDFieldNumber = 2;
  inline ::google::protobuf::int32 remoteid() const;
  inline void set_remoteid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ControlMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_remoteid();
  inline void clear_has_remoteid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 remoteid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_control_2eproto();
  friend void protobuf_AssignDesc_control_2eproto();
  friend void protobuf_ShutdownFile_control_2eproto();
  
  void InitAsDefaultInstance();
  static ControlMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ControlMessage

// required .ControlMessage.ControlMessageType type = 1;
inline bool ControlMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControlMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControlMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControlMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ControlMessage_ControlMessageType ControlMessage::type() const {
  return static_cast< ::ControlMessage_ControlMessageType >(type_);
}
inline void ControlMessage::set_type(::ControlMessage_ControlMessageType value) {
  GOOGLE_DCHECK(::ControlMessage_ControlMessageType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 remoteID = 2;
inline bool ControlMessage::has_remoteid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControlMessage::set_has_remoteid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControlMessage::clear_has_remoteid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControlMessage::clear_remoteid() {
  remoteid_ = 0;
  clear_has_remoteid();
}
inline ::google::protobuf::int32 ControlMessage::remoteid() const {
  return remoteid_;
}
inline void ControlMessage::set_remoteid(::google::protobuf::int32 value) {
  set_has_remoteid();
  remoteid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControlMessage_ControlMessageType>() {
  return ::ControlMessage_ControlMessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_control_2eproto__INCLUDED
