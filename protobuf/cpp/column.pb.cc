// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "column.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataMessage_DataMessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ColumnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ColumnMessage_ColumnMessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* IntColumnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntColumnMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LongColumnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LongColumnMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatColumnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatColumnMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleColumnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleColumnMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringColumnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringColumnMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BooleanColumnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BooleanColumnMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_column_2eproto() {
  protobuf_AddDesc_column_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "column.proto");
  GOOGLE_CHECK(file != NULL);
  DataMessage_descriptor_ = file->message_type(0);
  static const int DataMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, operatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, columns_),
  };
  DataMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataMessage_descriptor_,
      DataMessage::default_instance_,
      DataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataMessage));
  DataMessage_DataMessageType_descriptor_ = DataMessage_descriptor_->enum_type(0);
  ColumnMessage_descriptor_ = file->message_type(1);
  static const int ColumnMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, num_tuples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, int_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, long_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, float_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, double_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, string_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, boolean_column_),
  };
  ColumnMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnMessage_descriptor_,
      ColumnMessage::default_instance_,
      ColumnMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnMessage));
  ColumnMessage_ColumnMessageType_descriptor_ = ColumnMessage_descriptor_->enum_type(0);
  IntColumnMessage_descriptor_ = file->message_type(2);
  static const int IntColumnMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntColumnMessage, data_),
  };
  IntColumnMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntColumnMessage_descriptor_,
      IntColumnMessage::default_instance_,
      IntColumnMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntColumnMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntColumnMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntColumnMessage));
  LongColumnMessage_descriptor_ = file->message_type(3);
  static const int LongColumnMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongColumnMessage, data_),
  };
  LongColumnMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LongColumnMessage_descriptor_,
      LongColumnMessage::default_instance_,
      LongColumnMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongColumnMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LongColumnMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LongColumnMessage));
  FloatColumnMessage_descriptor_ = file->message_type(4);
  static const int FloatColumnMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatColumnMessage, data_),
  };
  FloatColumnMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloatColumnMessage_descriptor_,
      FloatColumnMessage::default_instance_,
      FloatColumnMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatColumnMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatColumnMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloatColumnMessage));
  DoubleColumnMessage_descriptor_ = file->message_type(5);
  static const int DoubleColumnMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleColumnMessage, data_),
  };
  DoubleColumnMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleColumnMessage_descriptor_,
      DoubleColumnMessage::default_instance_,
      DoubleColumnMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleColumnMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleColumnMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleColumnMessage));
  StringColumnMessage_descriptor_ = file->message_type(6);
  static const int StringColumnMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringColumnMessage, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringColumnMessage, start_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringColumnMessage, end_indices_),
  };
  StringColumnMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringColumnMessage_descriptor_,
      StringColumnMessage::default_instance_,
      StringColumnMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringColumnMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringColumnMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringColumnMessage));
  BooleanColumnMessage_descriptor_ = file->message_type(7);
  static const int BooleanColumnMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanColumnMessage, data_),
  };
  BooleanColumnMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BooleanColumnMessage_descriptor_,
      BooleanColumnMessage::default_instance_,
      BooleanColumnMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanColumnMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanColumnMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BooleanColumnMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_column_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataMessage_descriptor_, &DataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnMessage_descriptor_, &ColumnMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntColumnMessage_descriptor_, &IntColumnMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LongColumnMessage_descriptor_, &LongColumnMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloatColumnMessage_descriptor_, &FloatColumnMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleColumnMessage_descriptor_, &DoubleColumnMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringColumnMessage_descriptor_, &StringColumnMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BooleanColumnMessage_descriptor_, &BooleanColumnMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_column_2eproto() {
  delete DataMessage::default_instance_;
  delete DataMessage_reflection_;
  delete ColumnMessage::default_instance_;
  delete ColumnMessage_reflection_;
  delete IntColumnMessage::default_instance_;
  delete IntColumnMessage_reflection_;
  delete LongColumnMessage::default_instance_;
  delete LongColumnMessage_reflection_;
  delete FloatColumnMessage::default_instance_;
  delete FloatColumnMessage_reflection_;
  delete DoubleColumnMessage::default_instance_;
  delete DoubleColumnMessage_reflection_;
  delete StringColumnMessage::default_instance_;
  delete StringColumnMessage_reflection_;
  delete BooleanColumnMessage::default_instance_;
  delete BooleanColumnMessage_reflection_;
}

void protobuf_AddDesc_column_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014column.proto\"\226\001\n\013DataMessage\022*\n\004type\030\001"
    " \002(\0162\034.DataMessage.DataMessageType\022\022\n\nop"
    "eratorID\030\002 \002(\003\022\037\n\007columns\030\003 \003(\0132\016.Column"
    "Message\"&\n\017DataMessageType\022\007\n\003EOS\020\000\022\n\n\006N"
    "ORMAL\020\001\"\257\003\n\rColumnMessage\022.\n\004type\030\001 \002(\0162"
    " .ColumnMessage.ColumnMessageType\022\022\n\nnum"
    "_tuples\030\002 \002(\r\022%\n\nint_column\030\003 \001(\0132\021.IntC"
    "olumnMessage\022\'\n\013long_column\030\004 \001(\0132\022.Long"
    "ColumnMessage\022)\n\014float_column\030\005 \001(\0132\023.Fl"
    "oatColumnMessage\022+\n\rdouble_column\030\006 \001(\0132"
    "\024.DoubleColumnMessage\022+\n\rstring_column\030\007"
    " \001(\0132\024.StringColumnMessage\022-\n\016boolean_co"
    "lumn\030\010 \001(\0132\025.BooleanColumnMessage\"V\n\021Col"
    "umnMessageType\022\007\n\003INT\020\000\022\010\n\004LONG\020\001\022\t\n\005FLO"
    "AT\020\002\022\n\n\006DOUBLE\020\003\022\n\n\006STRING\020\004\022\013\n\007BOOLEAN\020"
    "\005\" \n\020IntColumnMessage\022\014\n\004data\030\001 \002(\014\"!\n\021L"
    "ongColumnMessage\022\014\n\004data\030\001 \002(\014\"\"\n\022FloatC"
    "olumnMessage\022\014\n\004data\030\001 \002(\014\"#\n\023DoubleColu"
    "mnMessage\022\014\n\004data\030\001 \002(\014\"O\n\023StringColumnM"
    "essage\022\014\n\004data\030\001 \002(\014\022\025\n\rstart_indices\030\002 "
    "\002(\014\022\023\n\013end_indices\030\003 \002(\014\"$\n\024BooleanColum"
    "nMessage\022\014\n\004data\030\001 \002(\014B1\n$edu.washington"
    ".escience.myriad.protoB\tDataProto", 913);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "column.proto", &protobuf_RegisterTypes);
  DataMessage::default_instance_ = new DataMessage();
  ColumnMessage::default_instance_ = new ColumnMessage();
  IntColumnMessage::default_instance_ = new IntColumnMessage();
  LongColumnMessage::default_instance_ = new LongColumnMessage();
  FloatColumnMessage::default_instance_ = new FloatColumnMessage();
  DoubleColumnMessage::default_instance_ = new DoubleColumnMessage();
  StringColumnMessage::default_instance_ = new StringColumnMessage();
  BooleanColumnMessage::default_instance_ = new BooleanColumnMessage();
  DataMessage::default_instance_->InitAsDefaultInstance();
  ColumnMessage::default_instance_->InitAsDefaultInstance();
  IntColumnMessage::default_instance_->InitAsDefaultInstance();
  LongColumnMessage::default_instance_->InitAsDefaultInstance();
  FloatColumnMessage::default_instance_->InitAsDefaultInstance();
  DoubleColumnMessage::default_instance_->InitAsDefaultInstance();
  StringColumnMessage::default_instance_->InitAsDefaultInstance();
  BooleanColumnMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_column_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_column_2eproto {
  StaticDescriptorInitializer_column_2eproto() {
    protobuf_AddDesc_column_2eproto();
  }
} static_descriptor_initializer_column_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* DataMessage_DataMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataMessage_DataMessageType_descriptor_;
}
bool DataMessage_DataMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataMessage_DataMessageType DataMessage::EOS;
const DataMessage_DataMessageType DataMessage::NORMAL;
const DataMessage_DataMessageType DataMessage::DataMessageType_MIN;
const DataMessage_DataMessageType DataMessage::DataMessageType_MAX;
const int DataMessage::DataMessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataMessage::kTypeFieldNumber;
const int DataMessage::kOperatorIDFieldNumber;
const int DataMessage::kColumnsFieldNumber;
#endif  // !_MSC_VER

DataMessage::DataMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataMessage::InitAsDefaultInstance() {
}

DataMessage::DataMessage(const DataMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  operatorid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataMessage::~DataMessage() {
  SharedDtor();
}

void DataMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataMessage_descriptor_;
}

const DataMessage& DataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_2eproto();  return *default_instance_;
}

DataMessage* DataMessage::default_instance_ = NULL;

DataMessage* DataMessage::New() const {
  return new DataMessage;
}

void DataMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    operatorid_ = GOOGLE_LONGLONG(0);
  }
  columns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataMessage.DataMessageType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataMessage_DataMessageType_IsValid(value)) {
            set_type(static_cast< ::DataMessage_DataMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operatorID;
        break;
      }
      
      // required int64 operatorID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operatorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &operatorid_)));
          set_has_operatorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_columns;
        break;
      }
      
      // repeated .ColumnMessage columns = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_columns;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataMessage.DataMessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required int64 operatorID = 2;
  if (has_operatorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->operatorid(), output);
  }
  
  // repeated .ColumnMessage columns = 3;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->columns(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataMessage.DataMessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required int64 operatorID = 2;
  if (has_operatorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->operatorid(), target);
  }
  
  // repeated .ColumnMessage columns = 3;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->columns(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataMessage.DataMessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required int64 operatorID = 2;
    if (has_operatorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->operatorid());
    }
    
  }
  // repeated .ColumnMessage columns = 3;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataMessage::MergeFrom(const DataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  columns_.MergeFrom(from.columns_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_operatorid()) {
      set_operatorid(from.operatorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMessage::CopyFrom(const DataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < columns_size(); i++) {
    if (!this->columns(i).IsInitialized()) return false;
  }
  return true;
}

void DataMessage::Swap(DataMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(operatorid_, other->operatorid_);
    columns_.Swap(&other->columns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataMessage_descriptor_;
  metadata.reflection = DataMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ColumnMessage_ColumnMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnMessage_ColumnMessageType_descriptor_;
}
bool ColumnMessage_ColumnMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ColumnMessage_ColumnMessageType ColumnMessage::INT;
const ColumnMessage_ColumnMessageType ColumnMessage::LONG;
const ColumnMessage_ColumnMessageType ColumnMessage::FLOAT;
const ColumnMessage_ColumnMessageType ColumnMessage::DOUBLE;
const ColumnMessage_ColumnMessageType ColumnMessage::STRING;
const ColumnMessage_ColumnMessageType ColumnMessage::BOOLEAN;
const ColumnMessage_ColumnMessageType ColumnMessage::ColumnMessageType_MIN;
const ColumnMessage_ColumnMessageType ColumnMessage::ColumnMessageType_MAX;
const int ColumnMessage::ColumnMessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ColumnMessage::kTypeFieldNumber;
const int ColumnMessage::kNumTuplesFieldNumber;
const int ColumnMessage::kIntColumnFieldNumber;
const int ColumnMessage::kLongColumnFieldNumber;
const int ColumnMessage::kFloatColumnFieldNumber;
const int ColumnMessage::kDoubleColumnFieldNumber;
const int ColumnMessage::kStringColumnFieldNumber;
const int ColumnMessage::kBooleanColumnFieldNumber;
#endif  // !_MSC_VER

ColumnMessage::ColumnMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnMessage::InitAsDefaultInstance() {
  int_column_ = const_cast< ::IntColumnMessage*>(&::IntColumnMessage::default_instance());
  long_column_ = const_cast< ::LongColumnMessage*>(&::LongColumnMessage::default_instance());
  float_column_ = const_cast< ::FloatColumnMessage*>(&::FloatColumnMessage::default_instance());
  double_column_ = const_cast< ::DoubleColumnMessage*>(&::DoubleColumnMessage::default_instance());
  string_column_ = const_cast< ::StringColumnMessage*>(&::StringColumnMessage::default_instance());
  boolean_column_ = const_cast< ::BooleanColumnMessage*>(&::BooleanColumnMessage::default_instance());
}

ColumnMessage::ColumnMessage(const ColumnMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  num_tuples_ = 0u;
  int_column_ = NULL;
  long_column_ = NULL;
  float_column_ = NULL;
  double_column_ = NULL;
  string_column_ = NULL;
  boolean_column_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnMessage::~ColumnMessage() {
  SharedDtor();
}

void ColumnMessage::SharedDtor() {
  if (this != default_instance_) {
    delete int_column_;
    delete long_column_;
    delete float_column_;
    delete double_column_;
    delete string_column_;
    delete boolean_column_;
  }
}

void ColumnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnMessage_descriptor_;
}

const ColumnMessage& ColumnMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_2eproto();  return *default_instance_;
}

ColumnMessage* ColumnMessage::default_instance_ = NULL;

ColumnMessage* ColumnMessage::New() const {
  return new ColumnMessage;
}

void ColumnMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    num_tuples_ = 0u;
    if (has_int_column()) {
      if (int_column_ != NULL) int_column_->::IntColumnMessage::Clear();
    }
    if (has_long_column()) {
      if (long_column_ != NULL) long_column_->::LongColumnMessage::Clear();
    }
    if (has_float_column()) {
      if (float_column_ != NULL) float_column_->::FloatColumnMessage::Clear();
    }
    if (has_double_column()) {
      if (double_column_ != NULL) double_column_->::DoubleColumnMessage::Clear();
    }
    if (has_string_column()) {
      if (string_column_ != NULL) string_column_->::StringColumnMessage::Clear();
    }
    if (has_boolean_column()) {
      if (boolean_column_ != NULL) boolean_column_->::BooleanColumnMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ColumnMessage.ColumnMessageType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ColumnMessage_ColumnMessageType_IsValid(value)) {
            set_type(static_cast< ::ColumnMessage_ColumnMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_tuples;
        break;
      }
      
      // required uint32 num_tuples = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_tuples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_tuples_)));
          set_has_num_tuples();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_int_column;
        break;
      }
      
      // optional .IntColumnMessage int_column = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_int_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int_column()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_long_column;
        break;
      }
      
      // optional .LongColumnMessage long_column = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_long_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_long_column()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_float_column;
        break;
      }
      
      // optional .FloatColumnMessage float_column = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_float_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_float_column()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_double_column;
        break;
      }
      
      // optional .DoubleColumnMessage double_column = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_double_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_double_column()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_string_column;
        break;
      }
      
      // optional .StringColumnMessage string_column = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_column()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_boolean_column;
        break;
      }
      
      // optional .BooleanColumnMessage boolean_column = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boolean_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boolean_column()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ColumnMessage.ColumnMessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required uint32 num_tuples = 2;
  if (has_num_tuples()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_tuples(), output);
  }
  
  // optional .IntColumnMessage int_column = 3;
  if (has_int_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->int_column(), output);
  }
  
  // optional .LongColumnMessage long_column = 4;
  if (has_long_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->long_column(), output);
  }
  
  // optional .FloatColumnMessage float_column = 5;
  if (has_float_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->float_column(), output);
  }
  
  // optional .DoubleColumnMessage double_column = 6;
  if (has_double_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->double_column(), output);
  }
  
  // optional .StringColumnMessage string_column = 7;
  if (has_string_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->string_column(), output);
  }
  
  // optional .BooleanColumnMessage boolean_column = 8;
  if (has_boolean_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->boolean_column(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ColumnMessage.ColumnMessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required uint32 num_tuples = 2;
  if (has_num_tuples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_tuples(), target);
  }
  
  // optional .IntColumnMessage int_column = 3;
  if (has_int_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->int_column(), target);
  }
  
  // optional .LongColumnMessage long_column = 4;
  if (has_long_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->long_column(), target);
  }
  
  // optional .FloatColumnMessage float_column = 5;
  if (has_float_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->float_column(), target);
  }
  
  // optional .DoubleColumnMessage double_column = 6;
  if (has_double_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->double_column(), target);
  }
  
  // optional .StringColumnMessage string_column = 7;
  if (has_string_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->string_column(), target);
  }
  
  // optional .BooleanColumnMessage boolean_column = 8;
  if (has_boolean_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->boolean_column(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ColumnMessage.ColumnMessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required uint32 num_tuples = 2;
    if (has_num_tuples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_tuples());
    }
    
    // optional .IntColumnMessage int_column = 3;
    if (has_int_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->int_column());
    }
    
    // optional .LongColumnMessage long_column = 4;
    if (has_long_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->long_column());
    }
    
    // optional .FloatColumnMessage float_column = 5;
    if (has_float_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->float_column());
    }
    
    // optional .DoubleColumnMessage double_column = 6;
    if (has_double_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->double_column());
    }
    
    // optional .StringColumnMessage string_column = 7;
    if (has_string_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->string_column());
    }
    
    // optional .BooleanColumnMessage boolean_column = 8;
    if (has_boolean_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boolean_column());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnMessage::MergeFrom(const ColumnMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num_tuples()) {
      set_num_tuples(from.num_tuples());
    }
    if (from.has_int_column()) {
      mutable_int_column()->::IntColumnMessage::MergeFrom(from.int_column());
    }
    if (from.has_long_column()) {
      mutable_long_column()->::LongColumnMessage::MergeFrom(from.long_column());
    }
    if (from.has_float_column()) {
      mutable_float_column()->::FloatColumnMessage::MergeFrom(from.float_column());
    }
    if (from.has_double_column()) {
      mutable_double_column()->::DoubleColumnMessage::MergeFrom(from.double_column());
    }
    if (from.has_string_column()) {
      mutable_string_column()->::StringColumnMessage::MergeFrom(from.string_column());
    }
    if (from.has_boolean_column()) {
      mutable_boolean_column()->::BooleanColumnMessage::MergeFrom(from.boolean_column());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnMessage::CopyFrom(const ColumnMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_int_column()) {
    if (!this->int_column().IsInitialized()) return false;
  }
  if (has_long_column()) {
    if (!this->long_column().IsInitialized()) return false;
  }
  if (has_float_column()) {
    if (!this->float_column().IsInitialized()) return false;
  }
  if (has_double_column()) {
    if (!this->double_column().IsInitialized()) return false;
  }
  if (has_string_column()) {
    if (!this->string_column().IsInitialized()) return false;
  }
  if (has_boolean_column()) {
    if (!this->boolean_column().IsInitialized()) return false;
  }
  return true;
}

void ColumnMessage::Swap(ColumnMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_tuples_, other->num_tuples_);
    std::swap(int_column_, other->int_column_);
    std::swap(long_column_, other->long_column_);
    std::swap(float_column_, other->float_column_);
    std::swap(double_column_, other->double_column_);
    std::swap(string_column_, other->string_column_);
    std::swap(boolean_column_, other->boolean_column_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnMessage_descriptor_;
  metadata.reflection = ColumnMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntColumnMessage::kDataFieldNumber;
#endif  // !_MSC_VER

IntColumnMessage::IntColumnMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntColumnMessage::InitAsDefaultInstance() {
}

IntColumnMessage::IntColumnMessage(const IntColumnMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntColumnMessage::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntColumnMessage::~IntColumnMessage() {
  SharedDtor();
}

void IntColumnMessage::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void IntColumnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntColumnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntColumnMessage_descriptor_;
}

const IntColumnMessage& IntColumnMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_2eproto();  return *default_instance_;
}

IntColumnMessage* IntColumnMessage::default_instance_ = NULL;

IntColumnMessage* IntColumnMessage::New() const {
  return new IntColumnMessage;
}

void IntColumnMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntColumnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntColumnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntColumnMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntColumnMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntColumnMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntColumnMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntColumnMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntColumnMessage::MergeFrom(const IntColumnMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntColumnMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntColumnMessage::CopyFrom(const IntColumnMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntColumnMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void IntColumnMessage::Swap(IntColumnMessage* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntColumnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntColumnMessage_descriptor_;
  metadata.reflection = IntColumnMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LongColumnMessage::kDataFieldNumber;
#endif  // !_MSC_VER

LongColumnMessage::LongColumnMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LongColumnMessage::InitAsDefaultInstance() {
}

LongColumnMessage::LongColumnMessage(const LongColumnMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LongColumnMessage::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LongColumnMessage::~LongColumnMessage() {
  SharedDtor();
}

void LongColumnMessage::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void LongColumnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LongColumnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LongColumnMessage_descriptor_;
}

const LongColumnMessage& LongColumnMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_2eproto();  return *default_instance_;
}

LongColumnMessage* LongColumnMessage::default_instance_ = NULL;

LongColumnMessage* LongColumnMessage::New() const {
  return new LongColumnMessage;
}

void LongColumnMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LongColumnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LongColumnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LongColumnMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LongColumnMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LongColumnMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LongColumnMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LongColumnMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LongColumnMessage::MergeFrom(const LongColumnMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LongColumnMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongColumnMessage::CopyFrom(const LongColumnMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongColumnMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LongColumnMessage::Swap(LongColumnMessage* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LongColumnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LongColumnMessage_descriptor_;
  metadata.reflection = LongColumnMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FloatColumnMessage::kDataFieldNumber;
#endif  // !_MSC_VER

FloatColumnMessage::FloatColumnMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FloatColumnMessage::InitAsDefaultInstance() {
}

FloatColumnMessage::FloatColumnMessage(const FloatColumnMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FloatColumnMessage::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatColumnMessage::~FloatColumnMessage() {
  SharedDtor();
}

void FloatColumnMessage::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void FloatColumnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatColumnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatColumnMessage_descriptor_;
}

const FloatColumnMessage& FloatColumnMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_2eproto();  return *default_instance_;
}

FloatColumnMessage* FloatColumnMessage::default_instance_ = NULL;

FloatColumnMessage* FloatColumnMessage::New() const {
  return new FloatColumnMessage;
}

void FloatColumnMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloatColumnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloatColumnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FloatColumnMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FloatColumnMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatColumnMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloatColumnMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloatColumnMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloatColumnMessage::MergeFrom(const FloatColumnMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloatColumnMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatColumnMessage::CopyFrom(const FloatColumnMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatColumnMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FloatColumnMessage::Swap(FloatColumnMessage* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloatColumnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatColumnMessage_descriptor_;
  metadata.reflection = FloatColumnMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoubleColumnMessage::kDataFieldNumber;
#endif  // !_MSC_VER

DoubleColumnMessage::DoubleColumnMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DoubleColumnMessage::InitAsDefaultInstance() {
}

DoubleColumnMessage::DoubleColumnMessage(const DoubleColumnMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DoubleColumnMessage::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleColumnMessage::~DoubleColumnMessage() {
  SharedDtor();
}

void DoubleColumnMessage::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DoubleColumnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleColumnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleColumnMessage_descriptor_;
}

const DoubleColumnMessage& DoubleColumnMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_2eproto();  return *default_instance_;
}

DoubleColumnMessage* DoubleColumnMessage::default_instance_ = NULL;

DoubleColumnMessage* DoubleColumnMessage::New() const {
  return new DoubleColumnMessage;
}

void DoubleColumnMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleColumnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DoubleColumnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DoubleColumnMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DoubleColumnMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleColumnMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleColumnMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleColumnMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleColumnMessage::MergeFrom(const DoubleColumnMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleColumnMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleColumnMessage::CopyFrom(const DoubleColumnMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleColumnMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DoubleColumnMessage::Swap(DoubleColumnMessage* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleColumnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleColumnMessage_descriptor_;
  metadata.reflection = DoubleColumnMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringColumnMessage::kDataFieldNumber;
const int StringColumnMessage::kStartIndicesFieldNumber;
const int StringColumnMessage::kEndIndicesFieldNumber;
#endif  // !_MSC_VER

StringColumnMessage::StringColumnMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringColumnMessage::InitAsDefaultInstance() {
}

StringColumnMessage::StringColumnMessage(const StringColumnMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringColumnMessage::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_indices_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_indices_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringColumnMessage::~StringColumnMessage() {
  SharedDtor();
}

void StringColumnMessage::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (start_indices_ != &::google::protobuf::internal::kEmptyString) {
    delete start_indices_;
  }
  if (end_indices_ != &::google::protobuf::internal::kEmptyString) {
    delete end_indices_;
  }
  if (this != default_instance_) {
  }
}

void StringColumnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringColumnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringColumnMessage_descriptor_;
}

const StringColumnMessage& StringColumnMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_2eproto();  return *default_instance_;
}

StringColumnMessage* StringColumnMessage::default_instance_ = NULL;

StringColumnMessage* StringColumnMessage::New() const {
  return new StringColumnMessage;
}

void StringColumnMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_start_indices()) {
      if (start_indices_ != &::google::protobuf::internal::kEmptyString) {
        start_indices_->clear();
      }
    }
    if (has_end_indices()) {
      if (end_indices_ != &::google::protobuf::internal::kEmptyString) {
        end_indices_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringColumnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_start_indices;
        break;
      }
      
      // required bytes start_indices = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_indices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_end_indices;
        break;
      }
      
      // required bytes end_indices = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_indices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringColumnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }
  
  // required bytes start_indices = 2;
  if (has_start_indices()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->start_indices(), output);
  }
  
  // required bytes end_indices = 3;
  if (has_end_indices()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->end_indices(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringColumnMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }
  
  // required bytes start_indices = 2;
  if (has_start_indices()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_indices(), target);
  }
  
  // required bytes end_indices = 3;
  if (has_end_indices()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_indices(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringColumnMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // required bytes start_indices = 2;
    if (has_start_indices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_indices());
    }
    
    // required bytes end_indices = 3;
    if (has_end_indices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_indices());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringColumnMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringColumnMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringColumnMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringColumnMessage::MergeFrom(const StringColumnMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_start_indices()) {
      set_start_indices(from.start_indices());
    }
    if (from.has_end_indices()) {
      set_end_indices(from.end_indices());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringColumnMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringColumnMessage::CopyFrom(const StringColumnMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringColumnMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void StringColumnMessage::Swap(StringColumnMessage* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(start_indices_, other->start_indices_);
    std::swap(end_indices_, other->end_indices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringColumnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringColumnMessage_descriptor_;
  metadata.reflection = StringColumnMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BooleanColumnMessage::kDataFieldNumber;
#endif  // !_MSC_VER

BooleanColumnMessage::BooleanColumnMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BooleanColumnMessage::InitAsDefaultInstance() {
}

BooleanColumnMessage::BooleanColumnMessage(const BooleanColumnMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BooleanColumnMessage::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BooleanColumnMessage::~BooleanColumnMessage() {
  SharedDtor();
}

void BooleanColumnMessage::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void BooleanColumnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BooleanColumnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BooleanColumnMessage_descriptor_;
}

const BooleanColumnMessage& BooleanColumnMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_column_2eproto();  return *default_instance_;
}

BooleanColumnMessage* BooleanColumnMessage::default_instance_ = NULL;

BooleanColumnMessage* BooleanColumnMessage::New() const {
  return new BooleanColumnMessage;
}

void BooleanColumnMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BooleanColumnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BooleanColumnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BooleanColumnMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BooleanColumnMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BooleanColumnMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BooleanColumnMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BooleanColumnMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BooleanColumnMessage::MergeFrom(const BooleanColumnMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BooleanColumnMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BooleanColumnMessage::CopyFrom(const BooleanColumnMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanColumnMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BooleanColumnMessage::Swap(BooleanColumnMessage* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BooleanColumnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BooleanColumnMessage_descriptor_;
  metadata.reflection = BooleanColumnMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
