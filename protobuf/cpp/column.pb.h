// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: column.proto

#ifndef PROTOBUF_column_2eproto__INCLUDED
#define PROTOBUF_column_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_column_2eproto();
void protobuf_AssignDesc_column_2eproto();
void protobuf_ShutdownFile_column_2eproto();

class DataMessage;
class ColumnMessage;
class IntColumnMessage;
class LongColumnMessage;
class FloatColumnMessage;
class DoubleColumnMessage;
class StringColumnMessage;
class BooleanColumnMessage;

enum DataMessage_DataMessageType {
  DataMessage_DataMessageType_EOS = 0,
  DataMessage_DataMessageType_NORMAL = 1,
  DataMessage_DataMessageType_EOI = 2
};
bool DataMessage_DataMessageType_IsValid(int value);
const DataMessage_DataMessageType DataMessage_DataMessageType_DataMessageType_MIN = DataMessage_DataMessageType_EOS;
const DataMessage_DataMessageType DataMessage_DataMessageType_DataMessageType_MAX = DataMessage_DataMessageType_EOI;
const int DataMessage_DataMessageType_DataMessageType_ARRAYSIZE = DataMessage_DataMessageType_DataMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataMessage_DataMessageType_descriptor();
inline const ::std::string& DataMessage_DataMessageType_Name(DataMessage_DataMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataMessage_DataMessageType_descriptor(), value);
}
inline bool DataMessage_DataMessageType_Parse(
    const ::std::string& name, DataMessage_DataMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataMessage_DataMessageType>(
    DataMessage_DataMessageType_descriptor(), name, value);
}
enum ColumnMessage_ColumnMessageType {
  ColumnMessage_ColumnMessageType_INT = 0,
  ColumnMessage_ColumnMessageType_LONG = 1,
  ColumnMessage_ColumnMessageType_FLOAT = 2,
  ColumnMessage_ColumnMessageType_DOUBLE = 3,
  ColumnMessage_ColumnMessageType_STRING = 4,
  ColumnMessage_ColumnMessageType_BOOLEAN = 5
};
bool ColumnMessage_ColumnMessageType_IsValid(int value);
const ColumnMessage_ColumnMessageType ColumnMessage_ColumnMessageType_ColumnMessageType_MIN = ColumnMessage_ColumnMessageType_INT;
const ColumnMessage_ColumnMessageType ColumnMessage_ColumnMessageType_ColumnMessageType_MAX = ColumnMessage_ColumnMessageType_BOOLEAN;
const int ColumnMessage_ColumnMessageType_ColumnMessageType_ARRAYSIZE = ColumnMessage_ColumnMessageType_ColumnMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ColumnMessage_ColumnMessageType_descriptor();
inline const ::std::string& ColumnMessage_ColumnMessageType_Name(ColumnMessage_ColumnMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ColumnMessage_ColumnMessageType_descriptor(), value);
}
inline bool ColumnMessage_ColumnMessageType_Parse(
    const ::std::string& name, ColumnMessage_ColumnMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ColumnMessage_ColumnMessageType>(
    ColumnMessage_ColumnMessageType_descriptor(), name, value);
}
// ===================================================================

class DataMessage : public ::google::protobuf::Message {
 public:
  DataMessage();
  virtual ~DataMessage();
  
  DataMessage(const DataMessage& from);
  
  inline DataMessage& operator=(const DataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataMessage& default_instance();
  
  void Swap(DataMessage* other);
  
  // implements Message ----------------------------------------------
  
  DataMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataMessage& from);
  void MergeFrom(const DataMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DataMessage_DataMessageType DataMessageType;
  static const DataMessageType EOS = DataMessage_DataMessageType_EOS;
  static const DataMessageType NORMAL = DataMessage_DataMessageType_NORMAL;
  static const DataMessageType EOI = DataMessage_DataMessageType_EOI;
  static inline bool DataMessageType_IsValid(int value) {
    return DataMessage_DataMessageType_IsValid(value);
  }
  static const DataMessageType DataMessageType_MIN =
    DataMessage_DataMessageType_DataMessageType_MIN;
  static const DataMessageType DataMessageType_MAX =
    DataMessage_DataMessageType_DataMessageType_MAX;
  static const int DataMessageType_ARRAYSIZE =
    DataMessage_DataMessageType_DataMessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataMessageType_descriptor() {
    return DataMessage_DataMessageType_descriptor();
  }
  static inline const ::std::string& DataMessageType_Name(DataMessageType value) {
    return DataMessage_DataMessageType_Name(value);
  }
  static inline bool DataMessageType_Parse(const ::std::string& name,
      DataMessageType* value) {
    return DataMessage_DataMessageType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .DataMessage.DataMessageType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::DataMessage_DataMessageType type() const;
  inline void set_type(::DataMessage_DataMessageType value);
  
  // required int64 operatorID = 2;
  inline bool has_operatorid() const;
  inline void clear_operatorid();
  static const int kOperatorIDFieldNumber = 2;
  inline ::google::protobuf::int64 operatorid() const;
  inline void set_operatorid(::google::protobuf::int64 value);
  
  // repeated .ColumnMessage columns = 3;
  inline int columns_size() const;
  inline void clear_columns();
  static const int kColumnsFieldNumber = 3;
  inline const ::ColumnMessage& columns(int index) const;
  inline ::ColumnMessage* mutable_columns(int index);
  inline ::ColumnMessage* add_columns();
  inline const ::google::protobuf::RepeatedPtrField< ::ColumnMessage >&
      columns() const;
  inline ::google::protobuf::RepeatedPtrField< ::ColumnMessage >*
      mutable_columns();
  
  // @@protoc_insertion_point(class_scope:DataMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_operatorid();
  inline void clear_has_operatorid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 operatorid_;
  ::google::protobuf::RepeatedPtrField< ::ColumnMessage > columns_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_column_2eproto();
  friend void protobuf_AssignDesc_column_2eproto();
  friend void protobuf_ShutdownFile_column_2eproto();
  
  void InitAsDefaultInstance();
  static DataMessage* default_instance_;
};
// -------------------------------------------------------------------

class ColumnMessage : public ::google::protobuf::Message {
 public:
  ColumnMessage();
  virtual ~ColumnMessage();
  
  ColumnMessage(const ColumnMessage& from);
  
  inline ColumnMessage& operator=(const ColumnMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnMessage& default_instance();
  
  void Swap(ColumnMessage* other);
  
  // implements Message ----------------------------------------------
  
  ColumnMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColumnMessage& from);
  void MergeFrom(const ColumnMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ColumnMessage_ColumnMessageType ColumnMessageType;
  static const ColumnMessageType INT = ColumnMessage_ColumnMessageType_INT;
  static const ColumnMessageType LONG = ColumnMessage_ColumnMessageType_LONG;
  static const ColumnMessageType FLOAT = ColumnMessage_ColumnMessageType_FLOAT;
  static const ColumnMessageType DOUBLE = ColumnMessage_ColumnMessageType_DOUBLE;
  static const ColumnMessageType STRING = ColumnMessage_ColumnMessageType_STRING;
  static const ColumnMessageType BOOLEAN = ColumnMessage_ColumnMessageType_BOOLEAN;
  static inline bool ColumnMessageType_IsValid(int value) {
    return ColumnMessage_ColumnMessageType_IsValid(value);
  }
  static const ColumnMessageType ColumnMessageType_MIN =
    ColumnMessage_ColumnMessageType_ColumnMessageType_MIN;
  static const ColumnMessageType ColumnMessageType_MAX =
    ColumnMessage_ColumnMessageType_ColumnMessageType_MAX;
  static const int ColumnMessageType_ARRAYSIZE =
    ColumnMessage_ColumnMessageType_ColumnMessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ColumnMessageType_descriptor() {
    return ColumnMessage_ColumnMessageType_descriptor();
  }
  static inline const ::std::string& ColumnMessageType_Name(ColumnMessageType value) {
    return ColumnMessage_ColumnMessageType_Name(value);
  }
  static inline bool ColumnMessageType_Parse(const ::std::string& name,
      ColumnMessageType* value) {
    return ColumnMessage_ColumnMessageType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .ColumnMessage.ColumnMessageType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ColumnMessage_ColumnMessageType type() const;
  inline void set_type(::ColumnMessage_ColumnMessageType value);
  
  // required uint32 num_tuples = 2;
  inline bool has_num_tuples() const;
  inline void clear_num_tuples();
  static const int kNumTuplesFieldNumber = 2;
  inline ::google::protobuf::uint32 num_tuples() const;
  inline void set_num_tuples(::google::protobuf::uint32 value);
  
  // optional .IntColumnMessage int_column = 3;
  inline bool has_int_column() const;
  inline void clear_int_column();
  static const int kIntColumnFieldNumber = 3;
  inline const ::IntColumnMessage& int_column() const;
  inline ::IntColumnMessage* mutable_int_column();
  inline ::IntColumnMessage* release_int_column();
  
  // optional .LongColumnMessage long_column = 4;
  inline bool has_long_column() const;
  inline void clear_long_column();
  static const int kLongColumnFieldNumber = 4;
  inline const ::LongColumnMessage& long_column() const;
  inline ::LongColumnMessage* mutable_long_column();
  inline ::LongColumnMessage* release_long_column();
  
  // optional .FloatColumnMessage float_column = 5;
  inline bool has_float_column() const;
  inline void clear_float_column();
  static const int kFloatColumnFieldNumber = 5;
  inline const ::FloatColumnMessage& float_column() const;
  inline ::FloatColumnMessage* mutable_float_column();
  inline ::FloatColumnMessage* release_float_column();
  
  // optional .DoubleColumnMessage double_column = 6;
  inline bool has_double_column() const;
  inline void clear_double_column();
  static const int kDoubleColumnFieldNumber = 6;
  inline const ::DoubleColumnMessage& double_column() const;
  inline ::DoubleColumnMessage* mutable_double_column();
  inline ::DoubleColumnMessage* release_double_column();
  
  // optional .StringColumnMessage string_column = 7;
  inline bool has_string_column() const;
  inline void clear_string_column();
  static const int kStringColumnFieldNumber = 7;
  inline const ::StringColumnMessage& string_column() const;
  inline ::StringColumnMessage* mutable_string_column();
  inline ::StringColumnMessage* release_string_column();
  
  // optional .BooleanColumnMessage boolean_column = 8;
  inline bool has_boolean_column() const;
  inline void clear_boolean_column();
  static const int kBooleanColumnFieldNumber = 8;
  inline const ::BooleanColumnMessage& boolean_column() const;
  inline ::BooleanColumnMessage* mutable_boolean_column();
  inline ::BooleanColumnMessage* release_boolean_column();
  
  // @@protoc_insertion_point(class_scope:ColumnMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_tuples();
  inline void clear_has_num_tuples();
  inline void set_has_int_column();
  inline void clear_has_int_column();
  inline void set_has_long_column();
  inline void clear_has_long_column();
  inline void set_has_float_column();
  inline void clear_has_float_column();
  inline void set_has_double_column();
  inline void clear_has_double_column();
  inline void set_has_string_column();
  inline void clear_has_string_column();
  inline void set_has_boolean_column();
  inline void clear_has_boolean_column();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::uint32 num_tuples_;
  ::IntColumnMessage* int_column_;
  ::LongColumnMessage* long_column_;
  ::FloatColumnMessage* float_column_;
  ::DoubleColumnMessage* double_column_;
  ::StringColumnMessage* string_column_;
  ::BooleanColumnMessage* boolean_column_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_column_2eproto();
  friend void protobuf_AssignDesc_column_2eproto();
  friend void protobuf_ShutdownFile_column_2eproto();
  
  void InitAsDefaultInstance();
  static ColumnMessage* default_instance_;
};
// -------------------------------------------------------------------

class IntColumnMessage : public ::google::protobuf::Message {
 public:
  IntColumnMessage();
  virtual ~IntColumnMessage();
  
  IntColumnMessage(const IntColumnMessage& from);
  
  inline IntColumnMessage& operator=(const IntColumnMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IntColumnMessage& default_instance();
  
  void Swap(IntColumnMessage* other);
  
  // implements Message ----------------------------------------------
  
  IntColumnMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntColumnMessage& from);
  void MergeFrom(const IntColumnMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:IntColumnMessage)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_column_2eproto();
  friend void protobuf_AssignDesc_column_2eproto();
  friend void protobuf_ShutdownFile_column_2eproto();
  
  void InitAsDefaultInstance();
  static IntColumnMessage* default_instance_;
};
// -------------------------------------------------------------------

class LongColumnMessage : public ::google::protobuf::Message {
 public:
  LongColumnMessage();
  virtual ~LongColumnMessage();
  
  LongColumnMessage(const LongColumnMessage& from);
  
  inline LongColumnMessage& operator=(const LongColumnMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LongColumnMessage& default_instance();
  
  void Swap(LongColumnMessage* other);
  
  // implements Message ----------------------------------------------
  
  LongColumnMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LongColumnMessage& from);
  void MergeFrom(const LongColumnMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:LongColumnMessage)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_column_2eproto();
  friend void protobuf_AssignDesc_column_2eproto();
  friend void protobuf_ShutdownFile_column_2eproto();
  
  void InitAsDefaultInstance();
  static LongColumnMessage* default_instance_;
};
// -------------------------------------------------------------------

class FloatColumnMessage : public ::google::protobuf::Message {
 public:
  FloatColumnMessage();
  virtual ~FloatColumnMessage();
  
  FloatColumnMessage(const FloatColumnMessage& from);
  
  inline FloatColumnMessage& operator=(const FloatColumnMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatColumnMessage& default_instance();
  
  void Swap(FloatColumnMessage* other);
  
  // implements Message ----------------------------------------------
  
  FloatColumnMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatColumnMessage& from);
  void MergeFrom(const FloatColumnMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:FloatColumnMessage)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_column_2eproto();
  friend void protobuf_AssignDesc_column_2eproto();
  friend void protobuf_ShutdownFile_column_2eproto();
  
  void InitAsDefaultInstance();
  static FloatColumnMessage* default_instance_;
};
// -------------------------------------------------------------------

class DoubleColumnMessage : public ::google::protobuf::Message {
 public:
  DoubleColumnMessage();
  virtual ~DoubleColumnMessage();
  
  DoubleColumnMessage(const DoubleColumnMessage& from);
  
  inline DoubleColumnMessage& operator=(const DoubleColumnMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleColumnMessage& default_instance();
  
  void Swap(DoubleColumnMessage* other);
  
  // implements Message ----------------------------------------------
  
  DoubleColumnMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DoubleColumnMessage& from);
  void MergeFrom(const DoubleColumnMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:DoubleColumnMessage)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_column_2eproto();
  friend void protobuf_AssignDesc_column_2eproto();
  friend void protobuf_ShutdownFile_column_2eproto();
  
  void InitAsDefaultInstance();
  static DoubleColumnMessage* default_instance_;
};
// -------------------------------------------------------------------

class StringColumnMessage : public ::google::protobuf::Message {
 public:
  StringColumnMessage();
  virtual ~StringColumnMessage();
  
  StringColumnMessage(const StringColumnMessage& from);
  
  inline StringColumnMessage& operator=(const StringColumnMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StringColumnMessage& default_instance();
  
  void Swap(StringColumnMessage* other);
  
  // implements Message ----------------------------------------------
  
  StringColumnMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringColumnMessage& from);
  void MergeFrom(const StringColumnMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // required bytes start_indices = 2;
  inline bool has_start_indices() const;
  inline void clear_start_indices();
  static const int kStartIndicesFieldNumber = 2;
  inline const ::std::string& start_indices() const;
  inline void set_start_indices(const ::std::string& value);
  inline void set_start_indices(const char* value);
  inline void set_start_indices(const void* value, size_t size);
  inline ::std::string* mutable_start_indices();
  inline ::std::string* release_start_indices();
  
  // required bytes end_indices = 3;
  inline bool has_end_indices() const;
  inline void clear_end_indices();
  static const int kEndIndicesFieldNumber = 3;
  inline const ::std::string& end_indices() const;
  inline void set_end_indices(const ::std::string& value);
  inline void set_end_indices(const char* value);
  inline void set_end_indices(const void* value, size_t size);
  inline ::std::string* mutable_end_indices();
  inline ::std::string* release_end_indices();
  
  // @@protoc_insertion_point(class_scope:StringColumnMessage)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_start_indices();
  inline void clear_has_start_indices();
  inline void set_has_end_indices();
  inline void clear_has_end_indices();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  ::std::string* start_indices_;
  ::std::string* end_indices_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_column_2eproto();
  friend void protobuf_AssignDesc_column_2eproto();
  friend void protobuf_ShutdownFile_column_2eproto();
  
  void InitAsDefaultInstance();
  static StringColumnMessage* default_instance_;
};
// -------------------------------------------------------------------

class BooleanColumnMessage : public ::google::protobuf::Message {
 public:
  BooleanColumnMessage();
  virtual ~BooleanColumnMessage();
  
  BooleanColumnMessage(const BooleanColumnMessage& from);
  
  inline BooleanColumnMessage& operator=(const BooleanColumnMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BooleanColumnMessage& default_instance();
  
  void Swap(BooleanColumnMessage* other);
  
  // implements Message ----------------------------------------------
  
  BooleanColumnMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BooleanColumnMessage& from);
  void MergeFrom(const BooleanColumnMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:BooleanColumnMessage)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_column_2eproto();
  friend void protobuf_AssignDesc_column_2eproto();
  friend void protobuf_ShutdownFile_column_2eproto();
  
  void InitAsDefaultInstance();
  static BooleanColumnMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// DataMessage

// required .DataMessage.DataMessageType type = 1;
inline bool DataMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::DataMessage_DataMessageType DataMessage::type() const {
  return static_cast< ::DataMessage_DataMessageType >(type_);
}
inline void DataMessage::set_type(::DataMessage_DataMessageType value) {
  GOOGLE_DCHECK(::DataMessage_DataMessageType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 operatorID = 2;
inline bool DataMessage::has_operatorid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataMessage::set_has_operatorid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataMessage::clear_has_operatorid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataMessage::clear_operatorid() {
  operatorid_ = GOOGLE_LONGLONG(0);
  clear_has_operatorid();
}
inline ::google::protobuf::int64 DataMessage::operatorid() const {
  return operatorid_;
}
inline void DataMessage::set_operatorid(::google::protobuf::int64 value) {
  set_has_operatorid();
  operatorid_ = value;
}

// repeated .ColumnMessage columns = 3;
inline int DataMessage::columns_size() const {
  return columns_.size();
}
inline void DataMessage::clear_columns() {
  columns_.Clear();
}
inline const ::ColumnMessage& DataMessage::columns(int index) const {
  return columns_.Get(index);
}
inline ::ColumnMessage* DataMessage::mutable_columns(int index) {
  return columns_.Mutable(index);
}
inline ::ColumnMessage* DataMessage::add_columns() {
  return columns_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ColumnMessage >&
DataMessage::columns() const {
  return columns_;
}
inline ::google::protobuf::RepeatedPtrField< ::ColumnMessage >*
DataMessage::mutable_columns() {
  return &columns_;
}

// -------------------------------------------------------------------

// ColumnMessage

// required .ColumnMessage.ColumnMessageType type = 1;
inline bool ColumnMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColumnMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColumnMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColumnMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ColumnMessage_ColumnMessageType ColumnMessage::type() const {
  return static_cast< ::ColumnMessage_ColumnMessageType >(type_);
}
inline void ColumnMessage::set_type(::ColumnMessage_ColumnMessageType value) {
  GOOGLE_DCHECK(::ColumnMessage_ColumnMessageType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 num_tuples = 2;
inline bool ColumnMessage::has_num_tuples() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColumnMessage::set_has_num_tuples() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColumnMessage::clear_has_num_tuples() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColumnMessage::clear_num_tuples() {
  num_tuples_ = 0u;
  clear_has_num_tuples();
}
inline ::google::protobuf::uint32 ColumnMessage::num_tuples() const {
  return num_tuples_;
}
inline void ColumnMessage::set_num_tuples(::google::protobuf::uint32 value) {
  set_has_num_tuples();
  num_tuples_ = value;
}

// optional .IntColumnMessage int_column = 3;
inline bool ColumnMessage::has_int_column() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColumnMessage::set_has_int_column() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColumnMessage::clear_has_int_column() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColumnMessage::clear_int_column() {
  if (int_column_ != NULL) int_column_->::IntColumnMessage::Clear();
  clear_has_int_column();
}
inline const ::IntColumnMessage& ColumnMessage::int_column() const {
  return int_column_ != NULL ? *int_column_ : *default_instance_->int_column_;
}
inline ::IntColumnMessage* ColumnMessage::mutable_int_column() {
  set_has_int_column();
  if (int_column_ == NULL) int_column_ = new ::IntColumnMessage;
  return int_column_;
}
inline ::IntColumnMessage* ColumnMessage::release_int_column() {
  clear_has_int_column();
  ::IntColumnMessage* temp = int_column_;
  int_column_ = NULL;
  return temp;
}

// optional .LongColumnMessage long_column = 4;
inline bool ColumnMessage::has_long_column() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ColumnMessage::set_has_long_column() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ColumnMessage::clear_has_long_column() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ColumnMessage::clear_long_column() {
  if (long_column_ != NULL) long_column_->::LongColumnMessage::Clear();
  clear_has_long_column();
}
inline const ::LongColumnMessage& ColumnMessage::long_column() const {
  return long_column_ != NULL ? *long_column_ : *default_instance_->long_column_;
}
inline ::LongColumnMessage* ColumnMessage::mutable_long_column() {
  set_has_long_column();
  if (long_column_ == NULL) long_column_ = new ::LongColumnMessage;
  return long_column_;
}
inline ::LongColumnMessage* ColumnMessage::release_long_column() {
  clear_has_long_column();
  ::LongColumnMessage* temp = long_column_;
  long_column_ = NULL;
  return temp;
}

// optional .FloatColumnMessage float_column = 5;
inline bool ColumnMessage::has_float_column() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ColumnMessage::set_has_float_column() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ColumnMessage::clear_has_float_column() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ColumnMessage::clear_float_column() {
  if (float_column_ != NULL) float_column_->::FloatColumnMessage::Clear();
  clear_has_float_column();
}
inline const ::FloatColumnMessage& ColumnMessage::float_column() const {
  return float_column_ != NULL ? *float_column_ : *default_instance_->float_column_;
}
inline ::FloatColumnMessage* ColumnMessage::mutable_float_column() {
  set_has_float_column();
  if (float_column_ == NULL) float_column_ = new ::FloatColumnMessage;
  return float_column_;
}
inline ::FloatColumnMessage* ColumnMessage::release_float_column() {
  clear_has_float_column();
  ::FloatColumnMessage* temp = float_column_;
  float_column_ = NULL;
  return temp;
}

// optional .DoubleColumnMessage double_column = 6;
inline bool ColumnMessage::has_double_column() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ColumnMessage::set_has_double_column() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ColumnMessage::clear_has_double_column() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ColumnMessage::clear_double_column() {
  if (double_column_ != NULL) double_column_->::DoubleColumnMessage::Clear();
  clear_has_double_column();
}
inline const ::DoubleColumnMessage& ColumnMessage::double_column() const {
  return double_column_ != NULL ? *double_column_ : *default_instance_->double_column_;
}
inline ::DoubleColumnMessage* ColumnMessage::mutable_double_column() {
  set_has_double_column();
  if (double_column_ == NULL) double_column_ = new ::DoubleColumnMessage;
  return double_column_;
}
inline ::DoubleColumnMessage* ColumnMessage::release_double_column() {
  clear_has_double_column();
  ::DoubleColumnMessage* temp = double_column_;
  double_column_ = NULL;
  return temp;
}

// optional .StringColumnMessage string_column = 7;
inline bool ColumnMessage::has_string_column() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ColumnMessage::set_has_string_column() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ColumnMessage::clear_has_string_column() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ColumnMessage::clear_string_column() {
  if (string_column_ != NULL) string_column_->::StringColumnMessage::Clear();
  clear_has_string_column();
}
inline const ::StringColumnMessage& ColumnMessage::string_column() const {
  return string_column_ != NULL ? *string_column_ : *default_instance_->string_column_;
}
inline ::StringColumnMessage* ColumnMessage::mutable_string_column() {
  set_has_string_column();
  if (string_column_ == NULL) string_column_ = new ::StringColumnMessage;
  return string_column_;
}
inline ::StringColumnMessage* ColumnMessage::release_string_column() {
  clear_has_string_column();
  ::StringColumnMessage* temp = string_column_;
  string_column_ = NULL;
  return temp;
}

// optional .BooleanColumnMessage boolean_column = 8;
inline bool ColumnMessage::has_boolean_column() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ColumnMessage::set_has_boolean_column() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ColumnMessage::clear_has_boolean_column() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ColumnMessage::clear_boolean_column() {
  if (boolean_column_ != NULL) boolean_column_->::BooleanColumnMessage::Clear();
  clear_has_boolean_column();
}
inline const ::BooleanColumnMessage& ColumnMessage::boolean_column() const {
  return boolean_column_ != NULL ? *boolean_column_ : *default_instance_->boolean_column_;
}
inline ::BooleanColumnMessage* ColumnMessage::mutable_boolean_column() {
  set_has_boolean_column();
  if (boolean_column_ == NULL) boolean_column_ = new ::BooleanColumnMessage;
  return boolean_column_;
}
inline ::BooleanColumnMessage* ColumnMessage::release_boolean_column() {
  clear_has_boolean_column();
  ::BooleanColumnMessage* temp = boolean_column_;
  boolean_column_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// IntColumnMessage

// required bytes data = 1;
inline bool IntColumnMessage::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntColumnMessage::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntColumnMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntColumnMessage::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& IntColumnMessage::data() const {
  return *data_;
}
inline void IntColumnMessage::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void IntColumnMessage::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void IntColumnMessage::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IntColumnMessage::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* IntColumnMessage::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LongColumnMessage

// required bytes data = 1;
inline bool LongColumnMessage::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LongColumnMessage::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LongColumnMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LongColumnMessage::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& LongColumnMessage::data() const {
  return *data_;
}
inline void LongColumnMessage::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void LongColumnMessage::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void LongColumnMessage::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LongColumnMessage::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* LongColumnMessage::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// FloatColumnMessage

// required bytes data = 1;
inline bool FloatColumnMessage::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FloatColumnMessage::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FloatColumnMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FloatColumnMessage::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& FloatColumnMessage::data() const {
  return *data_;
}
inline void FloatColumnMessage::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void FloatColumnMessage::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void FloatColumnMessage::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FloatColumnMessage::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* FloatColumnMessage::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DoubleColumnMessage

// required bytes data = 1;
inline bool DoubleColumnMessage::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DoubleColumnMessage::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DoubleColumnMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DoubleColumnMessage::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& DoubleColumnMessage::data() const {
  return *data_;
}
inline void DoubleColumnMessage::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void DoubleColumnMessage::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void DoubleColumnMessage::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DoubleColumnMessage::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* DoubleColumnMessage::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StringColumnMessage

// required bytes data = 1;
inline bool StringColumnMessage::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StringColumnMessage::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StringColumnMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StringColumnMessage::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& StringColumnMessage::data() const {
  return *data_;
}
inline void StringColumnMessage::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void StringColumnMessage::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void StringColumnMessage::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StringColumnMessage::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* StringColumnMessage::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes start_indices = 2;
inline bool StringColumnMessage::has_start_indices() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StringColumnMessage::set_has_start_indices() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StringColumnMessage::clear_has_start_indices() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StringColumnMessage::clear_start_indices() {
  if (start_indices_ != &::google::protobuf::internal::kEmptyString) {
    start_indices_->clear();
  }
  clear_has_start_indices();
}
inline const ::std::string& StringColumnMessage::start_indices() const {
  return *start_indices_;
}
inline void StringColumnMessage::set_start_indices(const ::std::string& value) {
  set_has_start_indices();
  if (start_indices_ == &::google::protobuf::internal::kEmptyString) {
    start_indices_ = new ::std::string;
  }
  start_indices_->assign(value);
}
inline void StringColumnMessage::set_start_indices(const char* value) {
  set_has_start_indices();
  if (start_indices_ == &::google::protobuf::internal::kEmptyString) {
    start_indices_ = new ::std::string;
  }
  start_indices_->assign(value);
}
inline void StringColumnMessage::set_start_indices(const void* value, size_t size) {
  set_has_start_indices();
  if (start_indices_ == &::google::protobuf::internal::kEmptyString) {
    start_indices_ = new ::std::string;
  }
  start_indices_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StringColumnMessage::mutable_start_indices() {
  set_has_start_indices();
  if (start_indices_ == &::google::protobuf::internal::kEmptyString) {
    start_indices_ = new ::std::string;
  }
  return start_indices_;
}
inline ::std::string* StringColumnMessage::release_start_indices() {
  clear_has_start_indices();
  if (start_indices_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = start_indices_;
    start_indices_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes end_indices = 3;
inline bool StringColumnMessage::has_end_indices() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StringColumnMessage::set_has_end_indices() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StringColumnMessage::clear_has_end_indices() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StringColumnMessage::clear_end_indices() {
  if (end_indices_ != &::google::protobuf::internal::kEmptyString) {
    end_indices_->clear();
  }
  clear_has_end_indices();
}
inline const ::std::string& StringColumnMessage::end_indices() const {
  return *end_indices_;
}
inline void StringColumnMessage::set_end_indices(const ::std::string& value) {
  set_has_end_indices();
  if (end_indices_ == &::google::protobuf::internal::kEmptyString) {
    end_indices_ = new ::std::string;
  }
  end_indices_->assign(value);
}
inline void StringColumnMessage::set_end_indices(const char* value) {
  set_has_end_indices();
  if (end_indices_ == &::google::protobuf::internal::kEmptyString) {
    end_indices_ = new ::std::string;
  }
  end_indices_->assign(value);
}
inline void StringColumnMessage::set_end_indices(const void* value, size_t size) {
  set_has_end_indices();
  if (end_indices_ == &::google::protobuf::internal::kEmptyString) {
    end_indices_ = new ::std::string;
  }
  end_indices_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StringColumnMessage::mutable_end_indices() {
  set_has_end_indices();
  if (end_indices_ == &::google::protobuf::internal::kEmptyString) {
    end_indices_ = new ::std::string;
  }
  return end_indices_;
}
inline ::std::string* StringColumnMessage::release_end_indices() {
  clear_has_end_indices();
  if (end_indices_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = end_indices_;
    end_indices_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BooleanColumnMessage

// required bytes data = 1;
inline bool BooleanColumnMessage::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BooleanColumnMessage::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BooleanColumnMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BooleanColumnMessage::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& BooleanColumnMessage::data() const {
  return *data_;
}
inline void BooleanColumnMessage::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void BooleanColumnMessage::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void BooleanColumnMessage::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BooleanColumnMessage::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* BooleanColumnMessage::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataMessage_DataMessageType>() {
  return ::DataMessage_DataMessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ColumnMessage_ColumnMessageType>() {
  return ::ColumnMessage_ColumnMessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_column_2eproto__INCLUDED
