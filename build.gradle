/* Gradle's build script */
buildscript {
  dependencies {
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.0'
    classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.2'
  }
}

import org.gradle.plugins.ide.eclipse.model.SourceFolder
import com.github.jengelman.gradle.plugins.shadow.transformers.ApacheLicenseResourceTransformer
import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat
import com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat

plugins {
  id 'java' // or 'groovy' Must be explicitly applied
  id 'com.github.johnrengelman.shadow' version '1.2.2'
}
/* This project uses Java and Eclipse. */
apply plugin: "java"
apply plugin: "eclipse"
/* Coveralls with JaCoCo */
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
/* Maven shade plugin equivalent */
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.github.sherter.google-java-format'

/* Set up group and version info for myria */
archivesBaseName = "myria"
group = "edu.washington.escience.myria"
version = "0.1"

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

/* We use Java 1.8 */
sourceCompatibility = 1.8
targetCompatibility = 1.8

/* Tell gradle where the source code is located. */
sourceSets {
  /* Code for main */
  main {
    java.srcDir 'src'
    java.srcDir 'protobuf/java'
    java.srcDir 'third-party-src'
    resources.srcDir 'conf'
    output.classesDir = 'build/main'
  }
  /* Code for tests */
  test {
    java.srcDir 'test'
    output.classesDir = 'build/test'
  }
}

/* Build the Eclipse .classpath file first, because if Gradle's build fails
 * we'll want to use Eclipse to debug it. */
test.dependsOn eclipseClasspath
tasks.eclipseClasspath.dependsOn cleanEclipseClasspath

task format(type: GoogleJavaFormat) {
  source 'src'
  source 'test'
  include '**/*.java'
}

task verifyFormatting(type: VerifyGoogleJavaFormat) {
  source 'src'
  source 'test'
  include '**/*.java'
}
/* Test if all *.java have been formatted. Run ./gradlew format to format all */
test.dependsOn verifyFormatting

/*
 * List the compile and runtime dependencies of all the tests.
 * Note that "group:name:version" dependencies will be downloaded from Maven.
 */

/* Where we will fetch external JAR files from. */
repositories {
  /* We need to override the official Apache repo for our custom Hadoop jars */
  /* TODO: remove when we upgrade to Hadoop 2.8 (fixes HADOOP-12807) */
  maven { url "https://raw.github.com/uwescience/hadoop/mvn-repo" }
  mavenCentral() /* The standard Java Maven repository. */
  maven { url "http://clojars.org/repo" } /* Clojars, for MonetDB */
  flatDir {
    name 'localRepository'
  }
  /* Apache snapshot repo, for REEF dev builds */
  /* maven { url "http://repository.apache.org/snapshots/" } */
  /* Our private maven repo for our REEF fork */
  maven { url "https://raw.github.com/uwescience/reef/mvn-repo" }

  /* For local REEF builds installed in the local Maven repo. */
  /* mavenLocal() */
}

repositories.localRepository {
  dirs './lib'
}

/* List constants that we use in multiple places. */
ext.slf4jVersion = "1.7.9"
ext.jacksonVersion = "2.4.4"
ext.jerseyVersion = "2.14"
ext.swaggerVersion = "2.11"
ext.swaggerMinorVersion = "1.3.11"
ext.jmxetricsVersion = "1.0.8"
/* ext.reefVersion = "0.15.0" */
/* for local or development REEF builds */
ext.reefVersion = "0.16.0-SNAPSHOT"
ext.hadoopVersion = "2.7.2"

dependencies {

  /* Note this jar is fetched from our private Maven repo (patched for HADOOP-12807) */
  compile ("org.apache.hadoop:hadoop-aws:${hadoopVersion}") {
    exclude group: "com.sun.jersey"
  }

  compile ("org.apache.hadoop:hadoop-client:${hadoopVersion}") {
    /* Hadoop depends on Jersey 1 but we don't need it. Exclude it to prevent
     * Classloader picking the wrong version of Jersey classes. */
    exclude group: "com.sun.jersey"
  }

  compile "xerces:xercesImpl:2.11.0"
  compile "xalan:xalan:2.7.2"
  compile "com.google.code.findbugs:annotations:3.0.0"
  compile "net.jcip:jcip-annotations:1.0"
  compile "org.ini4j:ini4j:0.5.2"
  compile "com.almworks.sqlite4java:sqlite4java:1.0.392"

  compile "com.google.guava:guava:18.0"
  /* this version is required for compatibility with REEF */
  compile "com.google.protobuf:protobuf-java:2.5.0"

  compile "io.netty:netty:3.9.6.Final"

  compile "com.goldmansachs:gs-collections:5.1.0"
  compile "com.goldmansachs:gs-collections-api:5.1.0"

  compile "joda-time:joda-time:2.6"

  compile "commons-io:commons-io:2.4"
  compile "org.apache.commons:commons-lang3:3.3.2"
  compile "commons-cli:commons-cli:1.2"

  compile "org.glassfish.jersey.core:jersey-server:${jerseyVersion}"
  compile "org.glassfish.jersey.core:jersey-client:${jerseyVersion}"
  compile "org.glassfish.jersey.core:jersey-common:${jerseyVersion}"
  compile "org.glassfish.jersey.containers:jersey-container-grizzly2-http:${jerseyVersion}"
  compile "org.glassfish.jersey.media:jersey-media-multipart:${jerseyVersion}"
  compile "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"

  compile "javax.annotation:javax.annotation-api:1.2"

  compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-providers:${jacksonVersion}"
  compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jacksonVersion}"
  compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jacksonVersion}"

  compile "com.wordnik:swagger-jersey2-jaxrs_${swaggerVersion}:${swaggerMinorVersion}"

  compile "org.slf4j:slf4j-api:${slf4jVersion}"
  //runtime "org.slf4j:slf4j-simple:${slf4jVersion}"
  runtime "org.slf4j:slf4j-log4j12:${slf4jVersion}"

  runtime "info.ganglia.jmxetric:jmxetric:${jmxetricsVersion}"

  compile "org.apache.commons:commons-csv:1.1"
  
  // Expression compiler
  compile "org.codehaus.janino:janino:2.7.7"

  compile "org.postgresql:postgresql:9.4-1202-jdbc41"

  compile("org.apache.reef:reef-project:${reefVersion}") { changing = true }
  compile("org.apache.reef:reef-common:${reefVersion}") { changing = true }
  compile("org.apache.reef:reef-runtime-local:${reefVersion}") { changing = true }
  compile("org.apache.reef:reef-runtime-yarn:${reefVersion}") { changing = true }
  compile("org.apache.reef:wake:${reefVersion}") { changing = true }
  compile("org.apache.reef:tang:${reefVersion}") { changing = true }

  testCompile "junit:junit:4.12"
  testCompile "org.assertj:assertj-core:1.7.1"
  testCompile "com.carrotsearch:junit-benchmarks:0.7.2"
}

/* If Java 8 is the default JDK but Java 7 is installed, do a proper cross-compile. */
tasks.withType(JavaCompile) {
  doFirst {
    if (sourceCompatibility == '1.7' && System.env.JAVA7_HOME != null) {
      options.fork = true
      options.bootClasspath = "$System.env.JAVA7_HOME/jre/lib/rt.jar"
      options.bootClasspath += "$File.pathSeparator$System.env.JAVA7_HOME/jre/lib/jsse.jar"
      // use the line above as an example to add jce.jar and other specific JDK jars
    }
  }
}

/* Tell Java to emit all compiler warnings. */
tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint"
}

/* Tell all tasks to add sqlite library to their classpath when running. */
tasks.withType(Test) {
  systemProperty "java.library.path", file("lib/sqlite4java-392")
  getReports().getHtml().setDestination(file('build/reports/'+name))

  // set heap size for the test JVM(s)
  minHeapSize = "512m"
  maxHeapSize = "2048m"
}

/* The eclipseClasspath task will build a local Eclipse .classpath file. */
eclipse.classpath {
  /* Ensure Eclipse compiled output appears in build directory. */
  defaultOutputDir = file('build/main')

  /* Download library sources and Javadoc for use in debugging. */
  downloadSources = true
  downloadJavadoc = true

  file {

  /* Ugly hack to stick the JNI pointer for sqlite into the .classpath file. */
    withXml {
      provider -> 
      provider.asNode().findAll { it.@path.contains("sqlite") }.each { 
        it.children().each {
          it.appendNode('attribute', [name: 'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY', value:'myria/lib/sqlite4java-392'])
        }
      }
    }

    /* Separate output folder for each src folders*/
    whenMerged {
      cp ->
      cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src") }*.output = "build/main"
      cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("protobuf") }*.output = "build/main"
      cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("third-party-src") }*.output = "build/main"
      cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("test") }*.output = "build/test"
    }

  }
}

tasks.withType(Test) {
    /* Optional: uncomment the next line to print which test is running. Useful for debugging. */
    beforeTest { desc -> println "Executing test ${desc.name} [${desc.className}]" }
    testLogging { exceptionFormat = 'full' }
}

/*
 * Copy all the jars that this project depends on into `build/libs`, and make
 * sure it this happens whenever jar is run.
 */
task copyToLib(type: Copy) {
    into "${buildDir}/libs"
    from configurations.runtime
}
/* Hack to make code that specifies this jar in JVM options version-agnostic */
task symlinkMetricsJar << {
    ant.symlink(link: "${buildDir}/libs/jmxetric.jar", resource: "jmxetric-${jmxetricsVersion}.jar", overwrite: true)
}
tasks.symlinkMetricsJar.dependsOn copyToLib
tasks.jar.dependsOn symlinkMetricsJar

/* allTests just runs all tests */
task allTests
allTests.dependsOn test

/* Assemble the Myria jar into `build/libs` */
jar {
  manifest {
    attributes("Implementation-Title" : "Myria",
               "Implementation-Version": version)
  }
}

/* Build the uberjar containing all our dependencies */
shadowJar {
  /* Without this option: "org.apache.tools.zip.Zip64RequiredException: archive contains more than 65535 entries." */
  zip64 true
  /* Apache license files will cause weird issues on case-insensitive filesystems like Mac HFS */
  exclude "LICENSE", "META-INF/*.RSA", "META-INF/*.SF","META-INF/*.DSA", "META-INF/license"
  transform(ApacheLicenseResourceTransformer)
  /* merge service descriptors to avoid Hadoop FileSystem services shadowing each other */
  mergeServiceFiles()
  /* Some of our deps conflict with old versions in Hadoop distro */
  relocate 'com.google.common', 'myriadeps.com.google.common'
  relocate 'javax.ws.rs', 'myriadeps.javax.ws.rs'
  relocate 'com.fasterxml.jackson', 'myriadeps.com.fasterxml.jackson'
  relocate 'org.glassfish.jersey', 'myriadeps.org.glassfish.jersey'
}

/* Coveralls */
jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true // coveralls plugin depends on xml format report
    html.enabled = true
  }
}

/* Update the version and branch in constants.java. */
task updateCommitInfo(type:Exec) {
  commandLine './update_commit_id.sh'
}
compileJava.dependsOn updateCommitInfo
eclipseClasspath.dependsOn updateCommitInfo
