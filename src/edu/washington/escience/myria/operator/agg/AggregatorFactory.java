package edu.washington.escience.myria.operator.agg;

import java.io.Serializable;
import java.util.List;

import javax.annotation.Nonnull;

import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

import edu.washington.escience.myria.DbException;
import edu.washington.escience.myria.Schema;

/**
 * Creates instances of the {@link Aggregator} class.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonSubTypes({
  @Type(value = PrimitiveAggregatorFactory.class, name = "Primitive"),
  @Type(value = UserDefinedAggregatorFactory.class, name = "UserDefined")
})
public interface AggregatorFactory extends Serializable {
  /**
   * Generate aggregators for emitting outputs.
   *
   * @param inputSchema the schema that incoming tuples will take.
   * @param offset the starting column index of aggregators made by this factory in the state hash table.
   * @return aggregators for emitting outputs.
   * @throws DbException if there is an error creating the aggregators
   */
  @Nonnull
  List<Aggregator> generateEmitAggs(Schema inputSchema, final int offset) throws DbException;

  /**
   * Generate internal aggregators, each aggregator corresponds to a column of the internal state.
   *
   * @param inputSchema the schema that incoming tuples will take.
   * @param offset the starting column index of aggregators made by this factory in the state hash table.
   * @return aggregators aggregators for internal state.
   * @throws DbException if there is an error creating the aggregators
   */
  @Nonnull
  List<Aggregator> generateInternalAggs(final Schema inputSchema, final int offset)
      throws DbException;

  /**
   * Generate the schema of the internal state of aggregators generated by this factory.
   *
   * @param inputSchema the {@link Schema} of the input tuples.
   * @return the {@link Schema} of the state assuming the specified input types.
   */
  Schema generateStateSchema(final Schema inputSchema);
}
