package edu.washington.escience.myria.parallel;

import edu.washington.escience.myria.DbException;
import edu.washington.escience.myria.TupleBatch;
import edu.washington.escience.myria.operator.Operator;

/**
 * The producer part of the Collect Exchange operator.
 * 
 * The producer actively pushes the tuples generated by the child operator to the paired LocalMultiwayConsumer.
 * 
 */
public final class LocalMultiwayProducer extends Producer {

  /** Required for Java serialization. */
  private static final long serialVersionUID = 1L;

  /**
   * @param child the child who provides data for this producer to distribute.
   * @param operatorIDs destination operators the data goes
   * */
  public LocalMultiwayProducer(final Operator child, final ExchangePairID[] operatorIDs) {
    super(child, operatorIDs);
  }

  @Override
  protected void consumeTuples(final TupleBatch tup) throws DbException {
    for (int i = 0; i < numChannels(); i++) {
      writeMessage(i, tup);
    }
  }

  @Override
  protected void childEOS() throws DbException {
    for (int i = 0; i < numChannels(); i++) {
      super.channelEnds(i);
    }
  }

  @Override
  protected void childEOI() throws DbException {
    TupleBatch eoiTB = TupleBatch.eoiTupleBatch(getSchema());
    for (int i = 0; i < numChannels(); i++) {
      writeMessage(i, eoiTB);
    }
  }
}
