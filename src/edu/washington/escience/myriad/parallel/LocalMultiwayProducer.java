package edu.washington.escience.myriad.parallel;

import org.jboss.netty.channel.Channel;

import edu.washington.escience.myriad.DbException;
import edu.washington.escience.myriad.TupleBatch;
import edu.washington.escience.myriad.TupleBatchBuffer;
import edu.washington.escience.myriad.operator.Operator;
import edu.washington.escience.myriad.proto.TransportProto.TransportMessage;
import edu.washington.escience.myriad.util.IPCUtils;

/**
 * The producer part of the Collect Exchange operator.
 * 
 * The producer actively pushes the tuples generated by the child operator to the paired LocalMultiwayConsumer.
 * 
 */
public final class LocalMultiwayProducer extends Producer {

  /** Required for Java serialization. */
  private static final long serialVersionUID = 1L;

  /**
   * @param child the child who provides data for this producer to distribute.
   * @param operatorIDs destination operators the data goes
   * */
  public LocalMultiwayProducer(final Operator child, final ExchangePairID[] operatorIDs) {
    super(child, operatorIDs);
  }

  @Override
  protected void consumeTuples(final TupleBatch tup) throws DbException {
    TupleBatchBuffer[] buffers = getBuffers();
    Channel[] ioChannels = getChannels();
    TransportMessage dm = null;
    tup.compactInto(buffers[0]);
    while ((dm = buffers[0].popFilledAsTM()) != null) {
      for (Channel ch : ioChannels) {
        try {
          writeMessage(ch, dm);
        } catch (InterruptedException e) {
          throw new DbException(e);
        }
      }
    }
  }

  @Override
  protected void childEOS() throws DbException {
    TransportMessage dm = null;
    TupleBatchBuffer[] buffers = getBuffers();
    Channel[] ioChannels = getChannels();
    while ((dm = buffers[0].popAnyAsTM()) != null) {
      for (Channel ch : ioChannels) {
        try {
          writeMessage(ch, dm);
        } catch (InterruptedException e) {
          throw new DbException(e);
        }
      }
    }
    for (Channel channel : ioChannels) {
      try {
        writeMessage(channel, IPCUtils.EOS);
      } catch (InterruptedException e) {
        throw new DbException(e);
      }
    }
  }

  @Override
  protected void childEOI() throws DbException {
    TransportMessage dm = null;
    TupleBatchBuffer[] buffers = getBuffers();
    Channel[] ioChannels = getChannels();
    while ((dm = buffers[0].popAnyAsTM()) != null) {
      for (Channel ch : ioChannels) {
        try {
          writeMessage(ch, dm);
        } catch (InterruptedException e) {
          throw new DbException(e);
        }
      }
    }
    for (Channel channel : ioChannels) {
      try {
        writeMessage(channel, IPCUtils.EOI);
      } catch (InterruptedException e) {
        throw new DbException(e);
      }
    }
  }
}
