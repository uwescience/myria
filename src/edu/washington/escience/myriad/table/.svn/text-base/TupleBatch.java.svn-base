package edu.washington.escience.table;

import java.io.Serializable;
import java.util.Iterator;
import java.util.List;

import edu.washington.escience.Column;
import edu.washington.escience.Predicate;
import edu.washington.escience.Schema;
import edu.washington.escience.parallel.PartitionFunction;

/**
 * Relational data processing units
 * */
public interface TupleBatch extends Serializable {

  public static final int BATCH_SIZE = 100;

  /**
   * The schema of the output tuples. The input schema may change by projects. This method return
   * the final output schema.
   * */
  public Schema outputSchema();

  public Schema inputSchema();

  public int numInputTuples();

  public int numOutputTuples();

  /**
   * @param inputColumnIdx the index of the column to be renamed in the input schema
   * @param newName the new column name
   * */
  public TupleBatch renameColumn(int inputColumnIdx, String newName);

  /**
   * -------------------The data processing methods --------------------
   * */

  /**
   * @param fieldIdx the index of input columns
   * 
   *          select only those tuples which fulfill the predicate. The effects of multiple select
   *          operations overlap.
   * 
   * */
  public TupleBatch filter(int fieldIdx, Predicate.Op op, Object operand);

  /**
   * Clear all the filters
   * */
  public TupleBatch purgeFilters();

  /**
   * @param remainingColumns the indices of the input columns
   * 
   *          multiple calls to this method
   * */
  public TupleBatch project(int[] remainingColumns);

  /**
   * Clear all the projects
   * */
  public TupleBatch purgeProjects();

  public TupleBatch append(TupleBatch another);
  
  public TupleBatch join(TupleBatch other, Predicate p, TupleBatch output);
  
  public TupleBatch union(TupleBatch another);
  
  public TupleBatch intersect(TupleBatch another);
  
  public TupleBatch except(TupleBatch another);
  
  public TupleBatch distinct();
  
  public TupleBatch groupby();
  
  public TupleBatch orderby();
  
  public List<Column> outputRawData();
  
  /**
   * -------------------- The parallel methods ------------------------
   * */

  public TupleBatch[] partition(PartitionFunction<?, ?> p);

  /**
   * -------------------- The value retrieval methods ------------------
   * */
  public boolean getBoolean(int column, int row);

  public double getDouble(int column, int row);

  public float getFloat(int column, int row);

  public int getInt(int column, int row);

  public String getString(int column, int row);
  
  public interface TupleIterator extends Iterator
  {
  }
  
}
